" Some helpers to edit mode
" http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

" use node for javascript
let $JS_CMD='node'

" apertium xml files
au BufRead,BufNewFile *.{dix,metadix,t1x}    set ft=xml

" arrow keys are for little kids
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>

" vim-gist options
let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1

" overwrite TComment map to go down a line
map <D-/> :TComment<CR>j

" include matcher configuration for ctrlp
if filereadable(expand("~/.vimrc_matcher"))
  source ~/.vimrc_matcher
endif

" open NERDTree tabs on GUI startup
let g:nerdtree_tabs_open_on_gui_startup = 1

" Some more python customizations :/
" stolen from http://j.mp/LMtnB7
" TODO should be replaced with http://www.vim.org/scripts/script.php?script_id=974
" explanation here http://henry.precheur.org/vim/python
autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd BufWritePre *.py normal m`:%s/\s\+$//e``
autocmd BufWritePre *.py set textwidth=120
autocmd BufRead *.py set tabstop=4
autocmd BufRead *.py set softtabstop=4
autocmd BufRead *.py set shiftwidth=4

" Some C customizations :(
au BufRead,BufNewFile *.py set expandtab
au BufRead,BufNewFile *.c set noexpandtab
au BufRead,BufNewFile *.h set noexpandtab
au BufRead,BufNewFile Makefile* set noexpandtab

" prefer jshint for javascript syntax checking
let g:syntastic_javascript_syntax_checker="jshint"

" tell HTMLTidy to ignore angular properties
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]


" Conque bottom panel
" nnoremap <Leader>` :ConqueTermSplit zsh<CR>
" nnoremap <silent> <Leader>[ :exe "resize " . (&lines * 3/4)<CR>
" nnoremap <silent> <Leader>] :exe "resize " . (&lines * 1/4)<CR>

" Vimux stuff
"let g:VimuxOrientation = "h"
"let g:VimuxHeight = "40"
"command! RailsConsole :call VimuxRunCommand('RAILS_ENV=test rails c')
"command! W :w | :call VimuxRunCommand("load '" . @% ."';")
"map <Leader>c :RailsConsole<CR>
"map <Leader>r :call VimuxRunCommand('rspec ' . @%)<CR>
"map <Leader>R :call VimuxRunCommand('rspec ' . @% . ':' . line('.'))<CR>
"map <Leader>\ :VimuxRunLastCommand<cr>

" Enable mouse mode (on terminal vim, too)
set mouse=a

" Clipboard stuff
"set clipboard=unnamed " this copies to OS's clipboard
vmap <Leader>y "*y
map <Leader>p "*p<CR>

" Refresh chrome (w/out focus)
nnoremap <silent> <Leader>r :<C-u>silent !osascript -e 'tell application "Google Chrome" to tell the active tab of its first window to reload'<CR>:redraw!<CR>

" More natural split opening
" http://robots.thoughtbot.com/post/48275867281/vim-splits-move-faster-and-more-naturally
set splitbelow
set splitright

" Fix key mapping conflict with Sparkup
let g:sparkupNextMapping = '<c-r>'

" Speed up git-gutter
let g:gitgutter_eager = 0

" Use haml syntax for hamlc files
au BufRead,BufNewFile *.hamlc set ft=haml

" vim-latex stuff
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'
"set g:Tex_ViewRule_pdf='open'

" mark search results
set hlsearch
map <C-l> :set hlsearch!<cr>

" JS file syntax
au BufRead,BufNewFile *.js set ft=javascript

" http://blog.sanctum.geek.nz/vim-command-typos/
if has("user_commands")
  command! -bang -nargs=? -complete=file E e<bang> <args>
  command! -bang -nargs=? -complete=file W w<bang> <args>
  command! -bang -nargs=? -complete=file Wq wq<bang> <args>
  command! -bang -nargs=? -complete=file WQ wq<bang> <args>
  command! -bang Wa wa<bang>
  command! -bang WA wa<bang>
  command! -bang Q q<bang>
  command! -bang QA qa<bang>
  command! -bang Qa qa<bang>

  command! -bang Bd bd<bang>
endif

" Line length column
set colorcolumn=80

" Use Powerline for Airline
let g:airline_powerline_fonts = 1

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)
